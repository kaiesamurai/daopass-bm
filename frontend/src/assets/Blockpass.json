{
    "address": "0x4529Ea3e070CBBbB27D2A6Ff56aBA21C2cD7bc6D",
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "priceFeedAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "ERC721IncorrectOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ERC721InsufficientApproval",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "approver",
            "type": "address"
          }
        ],
        "name": "ERC721InvalidApprover",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "ERC721InvalidOperator",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "ERC721InvalidOwner",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "ERC721InvalidReceiver",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "ERC721InvalidSender",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ERC721NonexistentToken",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "approved",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "_fromTokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "_toTokenId",
            "type": "uint256"
          }
        ],
        "name": "BatchMetadataUpdate",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "MetadataUpdate",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "organizer",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "uint256",
            "name": "creationTime",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "blockPassId",
            "type": "uint256"
          }
        ],
        "name": "blockPassCreated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "buyer",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "blockPassId",
            "type": "uint256"
          }
        ],
        "name": "passBooked",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "allBlockPassList",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "organizer",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "metadata",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "category",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "blockPassId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "passesSold",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "max_passes",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "passPrice",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "salesEndTime",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "bpEnded",
                "type": "bool"
              }
            ],
            "internalType": "struct BlockPass.BlockPassDetails[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "blockPassList",
        "outputs": [
          {
            "internalType": "address",
            "name": "organizer",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "metadata",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "category",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "blockPassId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "passesSold",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max_passes",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "passPrice",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "startTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "salesEndTime",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "bpEnded",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "blockPassesBookedByUser",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "organizer",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "metadata",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "category",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "blockPassId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "passesSold",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "max_passes",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "passPrice",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "salesEndTime",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "bpEnded",
                "type": "bool"
              }
            ],
            "internalType": "struct BlockPass.BlockPassDetails[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "bookedPassByUser",
        "outputs": [
          {
            "internalType": "address",
            "name": "organizer",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "metadata",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "category",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "blockPassId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "passesSold",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max_passes",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "passPrice",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "startTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "salesEndTime",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "bpEnded",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_max_pass_count",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_startTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_salesEndTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "_initialPassPrice",
            "type": "uint256"
          },
          {
            "internalType": "string",
            "name": "_metadata",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_category",
            "type": "string"
          }
        ],
        "name": "createNewPass",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "_category",
            "type": "string"
          }
        ],
        "name": "getByCategory",
        "outputs": [
          {
            "components": [
              {
                "internalType": "address",
                "name": "organizer",
                "type": "address"
              },
              {
                "internalType": "string",
                "name": "metadata",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "category",
                "type": "string"
              },
              {
                "internalType": "uint256",
                "name": "blockPassId",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "passesSold",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "max_passes",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "passPrice",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "startTime",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "salesEndTime",
                "type": "uint256"
              },
              {
                "internalType": "bool",
                "name": "bpEnded",
                "type": "bool"
              }
            ],
            "internalType": "struct BlockPass.BlockPassDetails[]",
            "name": "",
            "type": "tuple[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "getPassById",
        "outputs": [
          {
            "internalType": "address",
            "name": "organizer",
            "type": "address"
          },
          {
            "internalType": "string",
            "name": "metadata",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "category",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "blockPassId",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "passesSold",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "max_passes",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "passPrice",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "startTime",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "salesEndTime",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "bpEnded",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_user",
            "type": "address"
          }
        ],
        "name": "getUserTokens",
        "outputs": [
          {
            "internalType": "uint256[]",
            "name": "",
            "type": "uint256[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_blockPassId",
            "type": "uint256"
          }
        ],
        "name": "purchasePass",
        "outputs": [],
        "stateMutability": "payable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "s_priceFeed",
        "outputs": [
          {
            "internalType": "contract AggregatorV3Interface",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "operator",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "tokenOfOwnerByIndex",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "tokenURI",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "transactionHash": "0x9d1f97d09b933579df5782b3f6f60bbbbb0264e0d39cdd1d63033e517205e705",
    "receipt": {
      "to": null,
      "from": "0x3d82C1FC101F522b7F770EFafaBE7F247993deCF",
      "contractAddress": "0x4529Ea3e070CBBbB27D2A6Ff56aBA21C2cD7bc6D",
      "transactionIndex": 1,
      "gasUsed": "4146198",
      "logsBloom": "0x
      "blockHash": "0x08a7238791922ca75bf10c3a60bb9ab3c2de8acc6c9c0689725c1a6d21ffed14",
      "transactionHash": "0x9d1f97d09b933579df5782b3f6f60bbbbb0264e0d39cdd1d63033e517205e705",
      "logs": [],
      "blockNumber": 4153720,
      "cumulativeGasUsed": "4167198",
      "status": 1,
      "byzantium": true
    },
    "args": [
      "0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada"
    ],
    "numDeployments": 2,
    "solcInputHash": "60af14897c9d83a1dada69cbf9b7f9e6",
    "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"}],\"name\":\"blockPassCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"}],\"name\":\"passBooked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allBlockPassList\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passesSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_passes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bpEnded\",\"type\":\"bool\"}],\"internalType\":\"struct BlockPass.BlockPassDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockPassList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passesSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_passes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bpEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"blockPassesBookedByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passesSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_passes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bpEnded\",\"type\":\"bool\"}],\"internalType\":\"struct BlockPass.BlockPassDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bookedPassByUser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passesSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_passes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bpEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max_pass_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialPassPrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"createNewPass\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"getByCategory\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passesSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_passes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bpEnded\",\"type\":\"bool\"}],\"internalType\":\"struct BlockPass.BlockPassDetails[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPassById\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"organizer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"blockPassId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passesSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max_passes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"passPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salesEndTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"bpEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blockPassId\",\"type\":\"uint256\"}],\"name\":\"purchasePass\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Abdulazeez Salihu\",\"details\":\"The contract implements the Chainlink PriceFeed AggregatorV3Interface \",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"allBlockPassList()\":{\"details\":\"Retrieves an array of all blockpasses in the contract.\",\"returns\":{\"_0\":\"An array of block passes.\"}},\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"blockPassesBookedByUser(address)\":{\"details\":\"Retrieves the block passes booked by a specific user.\",\"params\":{\"_user\":\"The address of the user.\"},\"returns\":{\"_0\":\"An array of block passes booked by the user.\"}},\"createNewPass(uint256,uint256,uint256,uint256,string,string)\":{\"details\":\"Allows an organizer to create a new blockpass.\",\"params\":{\"_category\":\"The category of the blockpass.\",\"_initialPassPrice\":\"The first price for each block pass.\",\"_max_pass_count\":\"The maximum number of passes available for the new blockpass ticket.\",\"_metadata\":\"Additional metadata for the blockpass.\",\"_salesEndTime\":\"The end time of sales for the blockpass.\",\"_startTime\":\"The start time of the blockpass.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getByCategory(string)\":{\"details\":\"Retrieves an array of block passes belonging to a specific category.\",\"params\":{\"_category\":\"The category of block passes to retrieve.\"},\"returns\":{\"_0\":\"An array of block passes in the specified category.\"}},\"getUserTokens(address)\":{\"details\":\"Retrieves the NFT tokens owned by a specific user.\",\"params\":{\"_user\":\"The address of the user.\"},\"returns\":{\"_0\":\"An array of NFT token IDs owned by the user.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"purchasePass(uint256)\":{\"details\":\"Allows a user to purchase a block pass.\",\"params\":{\"_blockPassId\":\"The ID of the block pass to be purchased.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"title\":\"BlockPass\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating and managing block passes.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BlockPass.sol\":\"BlockPass\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BlockPass.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// File: @openzeppelin/contracts/utils/Counters.sol\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC20 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\r\\n */\\r\\ninterface IERC20Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC20InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     */\\r\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC20InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\r\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC20InvalidSpender(address spender);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC721 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\r\\n */\\r\\ninterface IERC721Errors {\\r\\n    /**\\r\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\r\\n     * Used in balance queries.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721InvalidOwner(address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721NonexistentToken(uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC721InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC721InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC721InvalidOperator(address operator);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Standard ERC1155 Errors\\r\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\r\\n */\\r\\ninterface IERC1155Errors {\\r\\n    /**\\r\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     * @param balance Current balance for the interacting account.\\r\\n     * @param needed Minimum amount required to perform a transfer.\\r\\n     * @param tokenId Identifier number of a token.\\r\\n     */\\r\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\r\\n     * @param sender Address whose tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidSender(address sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\r\\n     * @param receiver Address to which tokens are being transferred.\\r\\n     */\\r\\n    error ERC1155InvalidReceiver(address receiver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     * @param owner Address of the current owner of a token.\\r\\n     */\\r\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\r\\n     * @param approver Address initiating an approval operation.\\r\\n     */\\r\\n    error ERC1155InvalidApprover(address approver);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\r\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\r\\n     */\\r\\n    error ERC1155InvalidOperator(address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\r\\n     * Used in batch transfers.\\r\\n     * @param idsLength Length of the array of token identifiers\\r\\n     * @param valuesLength Length of the array of token amounts\\r\\n     */\\r\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/math/SignedMath.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard signed math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary SignedMath {\\r\\n    /**\\r\\n     * @dev Returns the largest of two signed numbers.\\r\\n     */\\r\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two signed numbers.\\r\\n     */\\r\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two signed numbers without overflow.\\r\\n     * The result is rounded towards zero.\\r\\n     */\\r\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // Formula from the book \\\"Hacker's Delight\\\"\\r\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\r\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the absolute unsigned value of a signed value.\\r\\n     */\\r\\n    function abs(int256 n) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            // must be unchecked in order to support `n = type(int256).min`\\r\\n            return uint256(n >= 0 ? n : -n);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/math/Math.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Muldiv operation overflow.\\r\\n     */\\r\\n    error MathOverflowedMulDiv();\\r\\n\\r\\n    enum Rounding {\\r\\n        Floor, // Toward negative infinity\\r\\n        Ceil, // Toward positive infinity\\r\\n        Trunc, // Toward zero\\r\\n        Expand // Away from zero\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the average of two numbers. The result is rounded towards\\r\\n     * zero.\\r\\n     */\\r\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // (a + b) / 2 can overflow.\\r\\n        return (a & b) + (a ^ b) / 2;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the ceiling of the division of two numbers.\\r\\n     *\\r\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\r\\n     * of rounding towards zero.\\r\\n     */\\r\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (b == 0) {\\r\\n            // Guarantee the same behavior as in a regular Solidity division.\\r\\n            return a / b;\\r\\n        }\\r\\n\\r\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\r\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\r\\n     * denominator == 0.\\r\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\r\\n     * Uniswap Labs also under MIT license.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2^256 + prod0.\\r\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(x, y, not(0))\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division.\\r\\n            if (prod1 == 0) {\\r\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\r\\n                // The surrounding unchecked block does not change this fact.\\r\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\r\\n                return prod0 / denominator;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n            if (denominator <= prod1) {\\r\\n                revert MathOverflowedMulDiv();\\r\\n            }\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                // Compute remainder using mulmod.\\r\\n                remainder := mulmod(x, y, denominator)\\r\\n\\r\\n                // Subtract 256 bit number from 512 bit number.\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\r\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\r\\n\\r\\n            uint256 twos = denominator & (0 - denominator);\\r\\n            assembly {\\r\\n                // Divide denominator by twos.\\r\\n                denominator := div(denominator, twos)\\r\\n\\r\\n                // Divide [prod1 prod0] by twos.\\r\\n                prod0 := div(prod0, twos)\\r\\n\\r\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\r\\n            // works in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\r\\n     */\\r\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\r\\n        uint256 result = mulDiv(x, y, denominator);\\r\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\r\\n            result += 1;\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\r\\n     * towards zero.\\r\\n     *\\r\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\r\\n     */\\r\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\r\\n        //\\r\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\r\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\r\\n        //\\r\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\r\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\r\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\r\\n        //\\r\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\r\\n        uint256 result = 1 << (log2(a) >> 1);\\r\\n\\r\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\r\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\r\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\r\\n        // into the expected uint128 result.\\r\\n        unchecked {\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            result = (result + a / result) >> 1;\\r\\n            return min(result, a / result);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\r\\n     */\\r\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = sqrt(a);\\r\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 128;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                value >>= 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 4 > 0) {\\r\\n                value >>= 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 2 > 0) {\\r\\n                value >>= 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 1 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log2(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >= 10 ** 64) {\\r\\n                value /= 10 ** 64;\\r\\n                result += 64;\\r\\n            }\\r\\n            if (value >= 10 ** 32) {\\r\\n                value /= 10 ** 32;\\r\\n                result += 32;\\r\\n            }\\r\\n            if (value >= 10 ** 16) {\\r\\n                value /= 10 ** 16;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >= 10 ** 8) {\\r\\n                value /= 10 ** 8;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >= 10 ** 4) {\\r\\n                value /= 10 ** 4;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >= 10 ** 2) {\\r\\n                value /= 10 ** 2;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >= 10 ** 1) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log10(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\r\\n     * Returns 0 if given 0.\\r\\n     *\\r\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\r\\n     */\\r\\n    function log256(uint256 value) internal pure returns (uint256) {\\r\\n        uint256 result = 0;\\r\\n        unchecked {\\r\\n            if (value >> 128 > 0) {\\r\\n                value >>= 128;\\r\\n                result += 16;\\r\\n            }\\r\\n            if (value >> 64 > 0) {\\r\\n                value >>= 64;\\r\\n                result += 8;\\r\\n            }\\r\\n            if (value >> 32 > 0) {\\r\\n                value >>= 32;\\r\\n                result += 4;\\r\\n            }\\r\\n            if (value >> 16 > 0) {\\r\\n                value >>= 16;\\r\\n                result += 2;\\r\\n            }\\r\\n            if (value >> 8 > 0) {\\r\\n                result += 1;\\r\\n            }\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\r\\n     * Returns 0 if given 0.\\r\\n     */\\r\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 result = log256(value);\\r\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\r\\n     */\\r\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\r\\n        return uint8(rounding) % 2 == 1;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Strings.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\r\\n    uint8 private constant ADDRESS_LENGTH = 20;\\r\\n\\r\\n    /**\\r\\n     * @dev The `value` string doesn't fit in the specified `length`.\\r\\n     */\\r\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            uint256 length = Math.log10(value) + 1;\\r\\n            string memory buffer = new string(length);\\r\\n            uint256 ptr;\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                ptr := add(buffer, add(32, length))\\r\\n            }\\r\\n            while (true) {\\r\\n                ptr--;\\r\\n                /// @solidity memory-safe-assembly\\r\\n                assembly {\\r\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\r\\n                }\\r\\n                value /= 10;\\r\\n                if (value == 0) break;\\r\\n            }\\r\\n            return buffer;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\r\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            return toHexString(value, Math.log256(value) + 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        uint256 localValue = value;\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\r\\n            localValue >>= 4;\\r\\n        }\\r\\n        if (localValue != 0) {\\r\\n            revert StringsInsufficientHexLength(value, length);\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\r\\n     * representation.\\r\\n     */\\r\\n    function toHexString(address addr) internal pure returns (string memory) {\\r\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the two strings are equal.\\r\\n     */\\r\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\r\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/Context.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\r\\n     * reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/interfaces/IERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\r\\n     *   a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\r\\n     *   {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\r\\n     *   a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\r\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\r\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the address zero.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/interfaces/IERC721.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n// File: @openzeppelin/contracts/interfaces/IERC4906.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4906.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n/// @title EIP-721 Metadata Update Extension\\r\\ninterface IERC4906 is IERC165, IERC721 {\\r\\n    /// @dev This event emits when the metadata of a token is changed.\\r\\n    /// So that the third-party platforms such as NFT market could\\r\\n    /// timely update the images and related attributes of the NFT.\\r\\n    event MetadataUpdate(uint256 _tokenId);\\r\\n\\r\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\r\\n    /// So that the third-party platforms such as NFT market could\\r\\n    /// timely update the images and related attributes of the NFTs.\\r\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    mapping(uint256 tokenId => address) private _owners;\\r\\n\\r\\n    mapping(address owner => uint256) private _balances;\\r\\n\\r\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\r\\n\\r\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\r\\n        if (owner == address(0)) {\\r\\n            revert ERC721InvalidOwner(address(0));\\r\\n        }\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\r\\n        return _requireOwned(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\r\\n        _requireOwned(tokenId);\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overridden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual {\\r\\n        _approve(to, tokenId, _msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\r\\n        _requireOwned(tokenId);\\r\\n\\r\\n        return _getApproved(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\r\\n        _setApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC721InvalidReceiver(address(0));\\r\\n        }\\r\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\r\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\r\\n        address previousOwner = _update(to, tokenId, _msgSender());\\r\\n        if (previousOwner != from) {\\r\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\r\\n        transferFrom(from, to, tokenId);\\r\\n        _checkOnERC721Received(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\r\\n     *\\r\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\r\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\r\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\r\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\r\\n     */\\r\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _owners[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\r\\n     */\\r\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\r\\n     * particular (ignoring whether it is owned by `owner`).\\r\\n     *\\r\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\r\\n     * assumption.\\r\\n     */\\r\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return\\r\\n            spender != address(0) &&\\r\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\r\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\r\\n     * the `spender` for the specific `tokenId`.\\r\\n     *\\r\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\r\\n     * assumption.\\r\\n     */\\r\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\r\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\r\\n            if (owner == address(0)) {\\r\\n                revert ERC721NonexistentToken(tokenId);\\r\\n            } else {\\r\\n                revert ERC721InsufficientApproval(spender, tokenId);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\r\\n     *\\r\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\r\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\r\\n     *\\r\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\r\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\r\\n     * remain consistent with one another.\\r\\n     */\\r\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\r\\n        unchecked {\\r\\n            _balances[account] += value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\r\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\r\\n     *\\r\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\r\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\r\\n     */\\r\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\r\\n        address from = _ownerOf(tokenId);\\r\\n\\r\\n        // Perform (optional) operator check\\r\\n        if (auth != address(0)) {\\r\\n            _checkAuthorized(from, auth, tokenId);\\r\\n        }\\r\\n\\r\\n        // Execute the update\\r\\n        if (from != address(0)) {\\r\\n            // Clear approval. No need to re-authorize or emit the Approval event\\r\\n            _approve(address(0), tokenId, address(0), false);\\r\\n\\r\\n            unchecked {\\r\\n                _balances[from] -= 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (to != address(0)) {\\r\\n            unchecked {\\r\\n                _balances[to] += 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n\\r\\n        return from;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC721InvalidReceiver(address(0));\\r\\n        }\\r\\n        address previousOwner = _update(to, tokenId, address(0));\\r\\n        if (previousOwner != address(0)) {\\r\\n            revert ERC721InvalidSender(address(0));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal {\\r\\n        address previousOwner = _update(address(0), tokenId, address(0));\\r\\n        if (previousOwner == address(0)) {\\r\\n            revert ERC721NonexistentToken(tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\r\\n        if (to == address(0)) {\\r\\n            revert ERC721InvalidReceiver(address(0));\\r\\n        }\\r\\n        address previousOwner = _update(to, tokenId, address(0));\\r\\n        if (previousOwner == address(0)) {\\r\\n            revert ERC721NonexistentToken(tokenId);\\r\\n        } else if (previousOwner != from) {\\r\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\r\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\r\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\r\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        _checkOnERC721Received(from, to, tokenId, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\r\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\r\\n        _approve(to, tokenId, auth, true);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\r\\n     * emitted in the context of transfers.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\r\\n        // Avoid reading the owner unless necessary\\r\\n        if (emitEvent || auth != address(0)) {\\r\\n            address owner = _requireOwned(tokenId);\\r\\n\\r\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\r\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\r\\n                revert ERC721InvalidApprover(auth);\\r\\n            }\\r\\n\\r\\n            if (emitEvent) {\\r\\n                emit Approval(owner, to, tokenId);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - operator can't be the address zero.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\r\\n        if (operator == address(0)) {\\r\\n            revert ERC721InvalidOperator(operator);\\r\\n        }\\r\\n        _operatorApprovals[owner][operator] = approved;\\r\\n        emit ApprovalForAll(owner, operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\r\\n     * Returns the owner.\\r\\n     *\\r\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\r\\n     */\\r\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\r\\n        address owner = _ownerOf(tokenId);\\r\\n        if (owner == address(0)) {\\r\\n            revert ERC721NonexistentToken(tokenId);\\r\\n        }\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\r\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param data bytes optional data to send along with the call\\r\\n     */\\r\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\r\\n        if (to.code.length > 0) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\r\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\r\\n                    revert ERC721InvalidReceiver(to);\\r\\n                }\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert ERC721InvalidReceiver(to);\\r\\n                } else {\\r\\n                    /// @solidity memory-safe-assembly\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\r\\n\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token with storage based token URI management.\\r\\n */\\r\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\r\\n    // defines events and does not include any external function.\\r\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\r\\n\\r\\n    // Optional mapping for token URIs\\r\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\r\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        _requireOwned(tokenId);\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n        string memory base = _baseURI();\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n        if (bytes(base).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string.concat(base, _tokenURI);\\r\\n        }\\r\\n\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n     *\\r\\n     * Emits {MetadataUpdate}.\\r\\n     */\\r\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n        emit MetadataUpdate(tokenId);\\r\\n    }\\r\\n}\\r\\n\\r\\n// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function description() external view returns (string memory);\\r\\n\\r\\n  function version() external view returns (uint256);\\r\\n\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n}\\r\\n\\r\\n// File: contracts/Blockpass.sol\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n/**\\r\\n * @title BlockPass\\r\\n * @author Abdulazeez Salihu\\r\\n * @notice This contract is for creating and managing block passes.\\r\\n * @dev The contract implements the Chainlink PriceFeed AggregatorV3Interface \\r\\n */\\r\\ncontract BlockPass is ERC721URIStorage {\\r\\n\\r\\n    using Counters for Counters.Counter;\\r\\n    Counters.Counter private tokenId;\\r\\n\\r\\n    // Struct to store details of each block pass\\r\\n    struct BlockPassDetails {\\r\\n        address organizer;\\r\\n        string metadata;\\r\\n        string category;\\r\\n        uint256 blockPassId;\\r\\n        uint256 passesSold;\\r\\n        uint256 max_passes;\\r\\n        uint256 passPrice;\\r\\n        uint256 startTime;\\r\\n        uint256 salesEndTime;\\r\\n        bool bpEnded;\\r\\n    }\\r\\n\\r\\n    uint256 private blockPass_count = 0;\\r\\n\\r\\n    AggregatorV3Interface public s_priceFeed;\\r\\n    BlockPassDetails[] public blockPassList;\\r\\n\\r\\n    mapping(uint256 => BlockPassDetails) public getPassById;\\r\\n    mapping(address => BlockPassDetails[]) public bookedPassByUser;\\r\\n    mapping(address => uint256[]) public tokenOfOwnerByIndex;\\r\\n\\r\\n    // Events\\r\\n    event blockPassCreated(\\r\\n        address indexed organizer,\\r\\n        uint256 indexed creationTime,\\r\\n        uint256 blockPassId\\r\\n    );\\r\\n    event passBooked(\\r\\n        address indexed buyer,\\r\\n        uint256 tokenId,\\r\\n        uint256 blockPassId\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address priceFeedAddress\\r\\n    ) ERC721(\\\"BlockPass\\\", \\\"BP\\\") {\\r\\n        tokenId.increment();\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows a user to purchase a block pass.\\r\\n     * @param _blockPassId The ID of the block pass to be purchased.\\r\\n     */\\r\\n    function purchasePass(uint256 _blockPassId) public payable {\\r\\n        BlockPassDetails storage _pass = getPassById[_blockPassId];\\r\\n        updatePassPrice(_pass); // Update pass price dynamically\\r\\n        require(msg.value >= _pass.passPrice, \\\"Insufficient payment\\\");\\r\\n        require(block.timestamp <= _pass.salesEndTime, \\\"Sales ended\\\");\\r\\n        require(_pass.passesSold < _pass.max_passes, \\\"Sold out\\\");\\r\\n\\r\\n        // Mint a new NFT representing the purchased block pass\\r\\n        string memory tokenURI = string(abi.encodePacked(_pass.metadata));\\r\\n        _safeMint(msg.sender, tokenId.current());\\r\\n        _setTokenURI(tokenId.current(), tokenURI);\\r\\n\\r\\n        // Calculate fees and transfer funds to the organizer\\r\\n        uint256 fee = (msg.value * 10) / 1000;\\r\\n        uint256 amountToOrganizer = msg.value - fee;\\r\\n        (bool success, ) = payable(_pass.organizer).call{\\r\\n            value: amountToOrganizer\\r\\n        }(\\\"\\\");\\r\\n        require(success);\\r\\n\\r\\n        _pass.passesSold++;\\r\\n        bookedPassByUser[msg.sender].push(_pass);\\r\\n        tokenOfOwnerByIndex[msg.sender].push(tokenId.current());\\r\\n\\r\\n        emit passBooked(msg.sender, tokenId.current(), _pass.blockPassId);\\r\\n        tokenId.increment();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows an organizer to create a new blockpass.\\r\\n     * @param _max_pass_count The maximum number of passes available for the new blockpass ticket.\\r\\n     * @param _startTime The start time of the blockpass.\\r\\n     * @param _salesEndTime The end time of sales for the blockpass.\\r\\n     * @param _initialPassPrice The first price for each block pass.\\r\\n     * @param _metadata Additional metadata for the blockpass.\\r\\n     * @param _category The category of the blockpass.\\r\\n     */\\r\\n    function createNewPass(\\r\\n        uint256 _max_pass_count,\\r\\n        uint256 _startTime,\\r\\n        uint256 _salesEndTime,\\r\\n        uint256 _initialPassPrice,\\r\\n        string memory _metadata,\\r\\n        string memory _category\\r\\n    ) external {\\r\\n        BlockPassDetails memory _pass = BlockPassDetails({\\r\\n            organizer: msg.sender,\\r\\n            blockPassId: blockPass_count,\\r\\n            startTime: _startTime,\\r\\n            max_passes: _max_pass_count,\\r\\n            passPrice: _initialPassPrice,\\r\\n            passesSold: 0,\\r\\n            metadata: _metadata,\\r\\n            category: _category,\\r\\n            salesEndTime: block.timestamp + _salesEndTime,\\r\\n            bpEnded: false\\r\\n        });\\r\\n\\r\\n        // Update mappings and arrays with the new block pass\\r\\n        getPassById[blockPass_count] = _pass;\\r\\n        blockPassList.push(_pass);\\r\\n\\r\\n        blockPass_count++;\\r\\n        emit blockPassCreated(\\r\\n            _pass.organizer,\\r\\n            block.timestamp,\\r\\n            _pass.blockPassId\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // GETTERS\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the NFT tokens owned by a specific user.\\r\\n     * @param _user The address of the user.\\r\\n     * @return An array of NFT token IDs owned by the user.\\r\\n     */\\r\\n    function getUserTokens(\\r\\n        address _user\\r\\n    ) public view returns (uint256[] memory) {\\r\\n        uint256 balance = balanceOf(_user);\\r\\n        uint256[] memory result = new uint256[](balance);\\r\\n        for (uint256 i = 0; i < balance; i++) {\\r\\n            result[i] = tokenOfOwnerByIndex[_user][i];\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves the block passes booked by a specific user.\\r\\n     * @param _user The address of the user.\\r\\n     * @return An array of block passes booked by the user.\\r\\n     */\\r\\n     function blockPassesBookedByUser(\\r\\n        address _user\\r\\n    ) public view returns (BlockPassDetails[] memory) {\\r\\n        return bookedPassByUser[_user];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves an array of all blockpasses in the contract.\\r\\n     * @return An array of block passes.\\r\\n     */\\r\\n    function allBlockPassList()\\r\\n        public\\r\\n        view\\r\\n        returns (BlockPassDetails[] memory)\\r\\n    {\\r\\n        return blockPassList;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Retrieves an array of block passes belonging to a specific category.\\r\\n     * @param _category The category of block passes to retrieve.\\r\\n     * @return An array of block passes in the specified category.\\r\\n     */\\r\\n    function getByCategory(\\r\\n        string memory _category\\r\\n    ) public view returns (BlockPassDetails[] memory) {\\r\\n        uint256 i = 0;\\r\\n        uint256 arrayCount = 0;\\r\\n        BlockPassDetails[] memory blockPassCategory = new BlockPassDetails[](\\r\\n            blockPassList.length\\r\\n        );\\r\\n\\r\\n        // Iterate through all block passes and filter by category\\r\\n        for (; i < blockPassList.length; i++) {\\r\\n            BlockPassDetails memory currentBlockPass = blockPassList[i];\\r\\n\\r\\n            if (\\r\\n                keccak256(abi.encodePacked(currentBlockPass.category)) ==\\r\\n                keccak256(abi.encodePacked(_category))\\r\\n            ) {\\r\\n                blockPassCategory[arrayCount] = currentBlockPass;\\r\\n                arrayCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return blockPassCategory;\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n    * @notice Updates the price of a block pass based on the latest asset price from the Chainlink price feed.\\r\\n    * @dev This function retrieves the latest asset price from the Chainlink price feed and updates the price of the specified block pass.\\r\\n    * @param _pass The storage reference to the BlockPassDetails struct whose price needs to be updated.\\r\\n    */\\r\\n    function updatePassPrice(BlockPassDetails storage _pass) internal {\\r\\n        (, int256 answer, , , ) = s_priceFeed.latestRoundData();\\r\\n        uint256 newPrice = uint256(answer * 10000000000);\\r\\n        _pass.passPrice = newPrice; // Update pass price based on latest asset price\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf31bcb17eebe402e45f8433c84dd2f54554c4dbda94fb33fa52e9ff26d88bf9e\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x608060405260006008553480156200001657600080fd5b5060405162004d7d38038062004d7d83398181016040528101906200003c9190620001a8565b6040518060400160405280600981526020017f426c6f636b5061737300000000000000000000000000000000000000000000008152506040518060400160405280600281526020017f42500000000000000000000000000000000000000000000000000000000000008152508160009081620000b9919062000454565b508060019081620000cb919062000454565b505050620000e060076200012860201b60201c565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200053b565b6001816000016000828254019250508190555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001708262000143565b9050919050565b620001828162000163565b81146200018e57600080fd5b50565b600081519050620001a28162000177565b92915050565b600060208284031215620001c157620001c06200013e565b5b6000620001d18482850162000191565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200025c57607f821691505b60208210810362000272576200027162000214565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002dc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200029d565b620002e886836200029d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003356200032f620003298462000300565b6200030a565b62000300565b9050919050565b6000819050919050565b620003518362000314565b6200036962000360826200033c565b848454620002aa565b825550505050565b600090565b6200038062000371565b6200038d81848462000346565b505050565b5b81811015620003b557620003a960008262000376565b60018101905062000393565b5050565b601f8211156200040457620003ce8162000278565b620003d9846200028d565b81016020851015620003e9578190505b62000401620003f8856200028d565b83018262000392565b50505b505050565b600082821c905092915050565b6000620004296000198460080262000409565b1980831691505092915050565b600062000444838362000416565b9150826002028217905092915050565b6200045f82620001da565b67ffffffffffffffff8111156200047b576200047a620001e5565b5b62000487825462000243565b62000494828285620003b9565b600060209050601f831160018114620004cc5760008415620004b7578287015190505b620004c3858262000436565b86555062000533565b601f198416620004dc8662000278565b60005b828110156200050657848901518255600182019150602085019450602081019050620004df565b8683101562000526578489015162000522601f89168262000416565b8355505b6001600288020188555050505b505050505050565b614832806200054b6000396000f3fe60806040526004361061014b5760003560e01c806342842e0e116100b657806395d89b411161006f57806395d89b4114610522578063a22cb4651461054d578063b88d4fde14610576578063c87b56dd1461059f578063e985e9c5146105dc578063ed1dde69146106195761014b565b806342842e0e146103bf57806347a9ec57146103e8578063519dc8d21461042e5780636352211e1461046b57806370a08231146104a85780638ea6b9c8146104e55761014b565b80630ec3b027116101085780630ec3b027146102a157806314462eda146102cc5780631be59b75146102e857806323b872dd146103135780632f745c591461033c57806336a5af0d146103795761014b565b806301ffc9a71461015057806303ebd8ad1461018d57806306fdde03146101ca57806307825d3a146101f5578063081812fc1461023b578063095ea7b314610278575b600080fd5b34801561015c57600080fd5b50610177600480360381019061017291906131c5565b610642565b604051610184919061320d565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190613286565b6106a3565b6040516101c1919061351d565b60405180910390f35b3480156101d657600080fd5b506101df610913565b6040516101ec9190613589565b60405180910390f35b34801561020157600080fd5b5061021c600480360381019061021791906135d7565b6109a5565b6040516102329a99989796959493929190613635565b60405180910390f35b34801561024757600080fd5b50610262600480360381019061025d91906136df565b610b53565b60405161026f919061370c565b60405180910390f35b34801561028457600080fd5b5061029f600480360381019061029a91906135d7565b610b6f565b005b3480156102ad57600080fd5b506102b6610b85565b6040516102c39190613786565b60405180910390f35b6102e660048036038101906102e191906136df565b610bab565b005b3480156102f457600080fd5b506102fd611015565b60405161030a919061351d565b60405180910390f35b34801561031f57600080fd5b5061033a600480360381019061033591906137a1565b611246565b005b34801561034857600080fd5b50610363600480360381019061035e91906135d7565b611348565b60405161037091906137f4565b60405180910390f35b34801561038557600080fd5b506103a0600480360381019061039b91906136df565b611379565b6040516103b69a99989796959493929190613635565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e191906137a1565b61151a565b005b3480156103f457600080fd5b5061040f600480360381019061040a91906136df565b61153a565b6040516104259a99989796959493929190613635565b60405180910390f35b34801561043a57600080fd5b5061045560048036038101906104509190613286565b6116cb565b60405161046291906138be565b60405180910390f35b34801561047757600080fd5b50610492600480360381019061048d91906136df565b6117cb565b60405161049f919061370c565b60405180910390f35b3480156104b457600080fd5b506104cf60048036038101906104ca9190613286565b6117dd565b6040516104dc91906137f4565b60405180910390f35b3480156104f157600080fd5b5061050c60048036038101906105079190613a15565b611897565b604051610519919061351d565b60405180910390f35b34801561052e57600080fd5b50610537611bae565b6040516105449190613589565b60405180910390f35b34801561055957600080fd5b50610574600480360381019061056f9190613a8a565b611c40565b005b34801561058257600080fd5b5061059d60048036038101906105989190613b6b565b611c56565b005b3480156105ab57600080fd5b506105c660048036038101906105c191906136df565b611c73565b6040516105d39190613589565b60405180910390f35b3480156105e857600080fd5b5061060360048036038101906105fe9190613bee565b611d86565b604051610610919061320d565b60405180910390f35b34801561062557600080fd5b50610640600480360381019061063b9190613c2e565b611e1a565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061069c575061069b826120ec565b5b9050919050565b6060600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561090857838290600052602060002090600a0201604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461078e90613d22565b80601f01602080910402602001604051908101604052809291908181526020018280546107ba90613d22565b80156108075780601f106107dc57610100808354040283529160200191610807565b820191906000526020600020905b8154815290600101906020018083116107ea57829003601f168201915b5050505050815260200160028201805461082090613d22565b80601f016020809104026020016040519081016040528092919081815260200182805461084c90613d22565b80156108995780601f1061086e57610100808354040283529160200191610899565b820191906000526020600020905b81548152906001019060200180831161087c57829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152505081526020019060010190610704565b505050509050919050565b60606000805461092290613d22565b80601f016020809104026020016040519081016040528092919081815260200182805461094e90613d22565b801561099b5780601f106109705761010080835404028352916020019161099b565b820191906000526020600020905b81548152906001019060200180831161097e57829003601f168201915b5050505050905090565b600c60205281600052604060002081815481106109c157600080fd5b90600052602060002090600a0201600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054610a0b90613d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3790613d22565b8015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b505050505090806002018054610a9990613d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac590613d22565b8015610b125780601f10610ae757610100808354040283529160200191610b12565b820191906000526020600020905b815481529060010190602001808311610af557829003601f168201915b5050505050908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a900460ff1690508a565b6000610b5e826121ce565b50610b6882612256565b9050919050565b610b818282610b7c612293565b61229b565b5050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600b60008381526020019081526020016000209050610bcb816122ad565b8060060154341015610c12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0990613d9f565b60405180910390fd5b8060080154421115610c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5090613e0b565b60405180910390fd5b8060050154816004015410610ca3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9a90613e77565b60405180910390fd5b600081600101604051602001610cb99190613f3a565b6040516020818303038152906040529050610cdd33610cd86007612369565b612377565b610cf0610cea6007612369565b82612395565b60006103e8600a34610d029190613f80565b610d0c9190613ff1565b905060008134610d1c9190614022565b905060008460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682604051610d6890614087565b60006040518083038185875af1925050503d8060008114610da5576040519150601f19603f3d011682016040523d82523d6000602084013e610daa565b606091505b5050905080610db857600080fd5b846004016000815480929190610dcd9061409c565b9190505550600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208590806001815401808255809150506001900390600052602060002090600a02016000909190919091506000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018201816001019081610eb69190614287565b5060028201816002019081610ecb9190614287565b506003820154816003015560048201548160040155600582015481600501556006820154816006015560078201548160070155600882015481600801556009820160009054906101000a900460ff168160090160006101000a81548160ff0219169083151502179055505050600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610f806007612369565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f427141b19c671240bd576ba030999ffa6eedc059da43013f1d626fe12be133ef610fe86007612369565b8760030154604051610ffb92919061436f565b60405180910390a261100d60076123f1565b505050505050565b6060600a805480602002602001604051908101604052809291908181526020016000905b8282101561123d57838290600052602060002090600a0201604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820180546110c390613d22565b80601f01602080910402602001604051908101604052809291908181526020018280546110ef90613d22565b801561113c5780601f106111115761010080835404028352916020019161113c565b820191906000526020600020905b81548152906001019060200180831161111f57829003601f168201915b5050505050815260200160028201805461115590613d22565b80601f016020809104026020016040519081016040528092919081815260200182805461118190613d22565b80156111ce5780601f106111a3576101008083540402835291602001916111ce565b820191906000526020600020905b8154815290600101906020018083116111b157829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff16151515158152505081526020019060010190611039565b50505050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112b85760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016112af919061370c565b60405180910390fd5b60006112cc83836112c7612293565b612407565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611342578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161133993929190614398565b60405180910390fd5b50505050565b600d602052816000526040600020818154811061136457600080fd5b90600052602060002001600091509150505481565b600a818154811061138957600080fd5b90600052602060002090600a02016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010180546113d290613d22565b80601f01602080910402602001604051908101604052809291908181526020018280546113fe90613d22565b801561144b5780601f106114205761010080835404028352916020019161144b565b820191906000526020600020905b81548152906001019060200180831161142e57829003601f168201915b50505050509080600201805461146090613d22565b80601f016020809104026020016040519081016040528092919081815260200182805461148c90613d22565b80156114d95780601f106114ae576101008083540402835291602001916114d9565b820191906000526020600020905b8154815290600101906020018083116114bc57829003601f168201915b5050505050908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a900460ff1690508a565b61153583838360405180602001604052806000815250611c56565b505050565b600b6020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461158390613d22565b80601f01602080910402602001604051908101604052809291908181526020018280546115af90613d22565b80156115fc5780601f106115d1576101008083540402835291602001916115fc565b820191906000526020600020905b8154815290600101906020018083116115df57829003601f168201915b50505050509080600201805461161190613d22565b80601f016020809104026020016040519081016040528092919081815260200182805461163d90613d22565b801561168a5780601f1061165f5761010080835404028352916020019161168a565b820191906000526020600020905b81548152906001019060200180831161166d57829003601f168201915b5050505050908060030154908060040154908060050154908060060154908060070154908060080154908060090160009054906101000a900460ff1690508a565b606060006116d8836117dd565b905060008167ffffffffffffffff8111156116f6576116f56138ea565b5b6040519080825280602002602001820160405280156117245781602001602082028036833780820191505090505b50905060005b828110156117c057600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208181548110611783576117826143cf565b5b90600052602060002001548282815181106117a1576117a06143cf565b5b60200260200101818152505080806117b89061409c565b91505061172a565b508092505050919050565b60006117d6826121ce565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118505760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401611847919061370c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000806000600a8054905067ffffffffffffffff8111156118bd576118bc6138ea565b5b6040519080825280602002602001820160405280156118f657816020015b6118e36130ee565b8152602001906001900390816118db5790505b5090505b600a80549050831015611ba3576000600a848154811061191d5761191c6143cf565b5b90600052602060002090600a0201604051806101400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461199d90613d22565b80601f01602080910402602001604051908101604052809291908181526020018280546119c990613d22565b8015611a165780601f106119eb57610100808354040283529160200191611a16565b820191906000526020600020905b8154815290600101906020018083116119f957829003601f168201915b50505050508152602001600282018054611a2f90613d22565b80601f0160208091040260200160405190810160405280929190818152602001828054611a5b90613d22565b8015611aa85780601f10611a7d57610100808354040283529160200191611aa8565b820191906000526020600020905b815481529060010190602001808311611a8b57829003601f168201915b505050505081526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581525050905085604051602001611b1b919061442f565b604051602081830303815290604052805190602001208160400151604051602001611b46919061442f565b6040516020818303038152906040528051906020012003611b8f5780828481518110611b7557611b746143cf565b5b60200260200101819052508280611b8b9061409c565b9350505b508280611b9b9061409c565b9350506118fa565b809350505050919050565b606060018054611bbd90613d22565b80601f0160208091040260200160405190810160405280929190818152602001828054611be990613d22565b8015611c365780601f10611c0b57610100808354040283529160200191611c36565b820191906000526020600020905b815481529060010190602001808311611c1957829003601f168201915b5050505050905090565b611c52611c4b612293565b8383612621565b5050565b611c61848484611246565b611c6d84848484612790565b50505050565b6060611c7e826121ce565b506000600660008481526020019081526020016000208054611c9f90613d22565b80601f0160208091040260200160405190810160405280929190818152602001828054611ccb90613d22565b8015611d185780601f10611ced57610100808354040283529160200191611d18565b820191906000526020600020905b815481529060010190602001808311611cfb57829003601f168201915b505050505090506000611d29612947565b90506000815103611d3e578192505050611d81565b600082511115611d73578082604051602001611d5b929190614446565b60405160208183030381529060405292505050611d81565b611d7c8461295e565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006040518061014001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020016008548152602001600081526020018881526020018581526020018781526020018642611e7d919061446a565b815260200160001515815250905080600b6000600854815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611efd919061449e565b506040820151816002019081611f13919061449e565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff021916908315150217905550905050600a8190806001815401808255809150506001900390600052602060002090600a020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019081611ffd919061449e565b506040820151816002019081612013919061449e565b50606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801556101208201518160090160006101000a81548160ff0219169083151502179055505050600860008154809291906120879061409c565b919050555042816000015173ffffffffffffffffffffffffffffffffffffffff167faed489f7ce003f6cd396a4f98e2d629422d9227dcb8040b0153f526eabfcf18783606001516040516120db91906137f4565b60405180910390a350505050505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806121b757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806121c757506121c6826129c7565b5b9050919050565b6000806121da83612a31565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361224d57826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161224491906137f4565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b6122a88383836001612a6e565b505050565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa15801561231c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234091906145fd565b50505091505060006402540be400826123599190614678565b9050808360060181905550505050565b600081600001549050919050565b612391828260405180602001604052806000815250612c33565b5050565b806006600084815260200190815260200160002090816123b5919061449e565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516123e591906137f4565b60405180910390a15050565b6001816000016000828254019250508190555050565b60008061241384612a31565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461245557612454818486612c4f565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146124e657612497600085600080612a6e565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612569576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361269257816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401612689919061370c565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612783919061320d565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115612941578273ffffffffffffffffffffffffffffffffffffffff1663150b7a026127d4612293565b8685856040518563ffffffff1660e01b81526004016127f69493929190614745565b6020604051808303816000875af192505050801561283257506040513d601f19601f8201168201806040525081019061282f91906147a6565b60015b6128b6573d8060008114612862576040519150601f19603f3d011682016040523d82523d6000602084013e612867565b606091505b5060008151036128ae57836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016128a5919061370c565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461293f57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612936919061370c565b60405180910390fd5b505b50505050565b606060405180602001604052806000815250905090565b6060612969826121ce565b506000612974612947565b9050600081511161299457604051806020016040528060008152506129bf565b8061299e84612d13565b6040516020016129af929190614446565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8080612aa75750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15612bdb576000612ab7846121ce565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612b2257508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b8015612b355750612b338184611d86565b155b15612b7757826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401612b6e919061370c565b60405180910390fd5b8115612bd957838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b612c3d8383612de1565b612c4a6000848484612790565b505050565b612c5a838383612eda565b612d0e57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612ccf57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401612cc691906137f4565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401612d059291906147d3565b60405180910390fd5b505050565b606060006001612d2284612f9b565b01905060008167ffffffffffffffff811115612d4157612d406138ea565b5b6040519080825280601f01601f191660200182016040528015612d735781602001600182028036833780820191505090505b509050600082602001820190505b600115612dd6578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581612dca57612dc9613fc2565b5b04945060008503612d81575b819350505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612e535760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401612e4a919061370c565b60405180910390fd5b6000612e6183836000612407565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612ed55760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401612ecc919061370c565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015612f9257508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612f535750612f528484611d86565b5b80612f9157508273ffffffffffffffffffffffffffffffffffffffff16612f7983612256565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612ff9577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381612fef57612fee613fc2565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310613036576d04ee2d6d415b85acef8100000000838161302c5761302b613fc2565b5b0492506020810190505b662386f26fc10000831061306557662386f26fc10000838161305b5761305a613fc2565b5b0492506010810190505b6305f5e100831061308e576305f5e100838161308457613083613fc2565b5b0492506008810190505b61271083106130b35761271083816130a9576130a8613fc2565b5b0492506004810190505b606483106130d657606483816130cc576130cb613fc2565b5b0492506002810190505b600a83106130e5576001810190505b80915050919050565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6131a28161316d565b81146131ad57600080fd5b50565b6000813590506131bf81613199565b92915050565b6000602082840312156131db576131da613163565b5b60006131e9848285016131b0565b91505092915050565b60008115159050919050565b613207816131f2565b82525050565b600060208201905061322260008301846131fe565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061325382613228565b9050919050565b61326381613248565b811461326e57600080fd5b50565b6000813590506132808161325a565b92915050565b60006020828403121561329c5761329b613163565b5b60006132aa84828501613271565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6132e881613248565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561332857808201518184015260208101905061330d565b60008484015250505050565b6000601f19601f8301169050919050565b6000613350826132ee565b61335a81856132f9565b935061336a81856020860161330a565b61337381613334565b840191505092915050565b6000819050919050565b6133918161337e565b82525050565b6133a0816131f2565b82525050565b6000610140830160008301516133bf60008601826132df565b50602083015184820360208601526133d78282613345565b915050604083015184820360408601526133f18282613345565b91505060608301516134066060860182613388565b5060808301516134196080860182613388565b5060a083015161342c60a0860182613388565b5060c083015161343f60c0860182613388565b5060e083015161345260e0860182613388565b50610100830151613467610100860182613388565b5061012083015161347c610120860182613397565b508091505092915050565b600061349383836133a6565b905092915050565b6000602082019050919050565b60006134b3826132b3565b6134bd81856132be565b9350836020820285016134cf856132cf565b8060005b8581101561350b57848403895281516134ec8582613487565b94506134f78361349b565b925060208a019950506001810190506134d3565b50829750879550505050505092915050565b6000602082019050818103600083015261353781846134a8565b905092915050565b600082825260208201905092915050565b600061355b826132ee565b613565818561353f565b935061357581856020860161330a565b61357e81613334565b840191505092915050565b600060208201905081810360008301526135a38184613550565b905092915050565b6135b48161337e565b81146135bf57600080fd5b50565b6000813590506135d1816135ab565b92915050565b600080604083850312156135ee576135ed613163565b5b60006135fc85828601613271565b925050602061360d858286016135c2565b9150509250929050565b61362081613248565b82525050565b61362f8161337e565b82525050565b60006101408201905061364b600083018d613617565b818103602083015261365d818c613550565b90508181036040830152613671818b613550565b9050613680606083018a613626565b61368d6080830189613626565b61369a60a0830188613626565b6136a760c0830187613626565b6136b460e0830186613626565b6136c2610100830185613626565b6136d06101208301846131fe565b9b9a5050505050505050505050565b6000602082840312156136f5576136f4613163565b5b6000613703848285016135c2565b91505092915050565b60006020820190506137216000830184613617565b92915050565b6000819050919050565b600061374c61374761374284613228565b613727565b613228565b9050919050565b600061375e82613731565b9050919050565b600061377082613753565b9050919050565b61378081613765565b82525050565b600060208201905061379b6000830184613777565b92915050565b6000806000606084860312156137ba576137b9613163565b5b60006137c886828701613271565b93505060206137d986828701613271565b92505060406137ea868287016135c2565b9150509250925092565b60006020820190506138096000830184613626565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006138478383613388565b60208301905092915050565b6000602082019050919050565b600061386b8261380f565b613875818561381a565b93506138808361382b565b8060005b838110156138b1578151613898888261383b565b97506138a383613853565b925050600181019050613884565b5085935050505092915050565b600060208201905081810360008301526138d88184613860565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61392282613334565b810181811067ffffffffffffffff82111715613941576139406138ea565b5b80604052505050565b6000613954613159565b90506139608282613919565b919050565b600067ffffffffffffffff8211156139805761397f6138ea565b5b61398982613334565b9050602081019050919050565b82818337600083830152505050565b60006139b86139b384613965565b61394a565b9050828152602081018484840111156139d4576139d36138e5565b5b6139df848285613996565b509392505050565b600082601f8301126139fc576139fb6138e0565b5b8135613a0c8482602086016139a5565b91505092915050565b600060208284031215613a2b57613a2a613163565b5b600082013567ffffffffffffffff811115613a4957613a48613168565b5b613a55848285016139e7565b91505092915050565b613a67816131f2565b8114613a7257600080fd5b50565b600081359050613a8481613a5e565b92915050565b60008060408385031215613aa157613aa0613163565b5b6000613aaf85828601613271565b9250506020613ac085828601613a75565b9150509250929050565b600067ffffffffffffffff821115613ae557613ae46138ea565b5b613aee82613334565b9050602081019050919050565b6000613b0e613b0984613aca565b61394a565b905082815260208101848484011115613b2a57613b296138e5565b5b613b35848285613996565b509392505050565b600082601f830112613b5257613b516138e0565b5b8135613b62848260208601613afb565b91505092915050565b60008060008060808587031215613b8557613b84613163565b5b6000613b9387828801613271565b9450506020613ba487828801613271565b9350506040613bb5878288016135c2565b925050606085013567ffffffffffffffff811115613bd657613bd5613168565b5b613be287828801613b3d565b91505092959194509250565b60008060408385031215613c0557613c04613163565b5b6000613c1385828601613271565b9250506020613c2485828601613271565b9150509250929050565b60008060008060008060c08789031215613c4b57613c4a613163565b5b6000613c5989828a016135c2565b9650506020613c6a89828a016135c2565b9550506040613c7b89828a016135c2565b9450506060613c8c89828a016135c2565b935050608087013567ffffffffffffffff811115613cad57613cac613168565b5b613cb989828a016139e7565b92505060a087013567ffffffffffffffff811115613cda57613cd9613168565b5b613ce689828a016139e7565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613d3a57607f821691505b602082108103613d4d57613d4c613cf3565b5b50919050565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b6000613d8960148361353f565b9150613d9482613d53565b602082019050919050565b60006020820190508181036000830152613db881613d7c565b9050919050565b7f53616c657320656e646564000000000000000000000000000000000000000000600082015250565b6000613df5600b8361353f565b9150613e0082613dbf565b602082019050919050565b60006020820190508181036000830152613e2481613de8565b9050919050565b7f536f6c64206f7574000000000000000000000000000000000000000000000000600082015250565b6000613e6160088361353f565b9150613e6c82613e2b565b602082019050919050565b60006020820190508181036000830152613e9081613e54565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b60008154613ec481613d22565b613ece8186613e97565b94506001821660008114613ee95760018114613efe57613f31565b60ff1983168652811515820286019350613f31565b613f0785613ea2565b60005b83811015613f2957815481890152600182019150602081019050613f0a565b838801955050505b50505092915050565b6000613f468284613eb7565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613f8b8261337e565b9150613f968361337e565b9250828202613fa48161337e565b91508282048414831517613fbb57613fba613f51565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613ffc8261337e565b91506140078361337e565b92508261401757614016613fc2565b5b828204905092915050565b600061402d8261337e565b91506140388361337e565b92508282039050818111156140505761404f613f51565b5b92915050565b600081905092915050565b50565b6000614071600083614056565b915061407c82614061565b600082019050919050565b600061409282614064565b9150819050919050565b60006140a78261337e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036140d9576140d8613f51565b5b600182019050919050565b6000815490506140f381613d22565b9050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026141477fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261410a565b614151868361410a565b95508019841693508086168417925050509392505050565b600061418461417f61417a8461337e565b613727565b61337e565b9050919050565b6000819050919050565b61419e83614169565b6141b26141aa8261418b565b848454614117565b825550505050565b600090565b6141c76141ba565b6141d2818484614195565b505050565b5b818110156141f6576141eb6000826141bf565b6001810190506141d8565b5050565b601f82111561423b5761420c81613ea2565b614215846140fa565b81016020851015614224578190505b614238614230856140fa565b8301826141d7565b50505b505050565b600082821c905092915050565b600061425e60001984600802614240565b1980831691505092915050565b6000614277838361424d565b9150826002028217905092915050565b81810361429557505061436d565b61429e826140e4565b67ffffffffffffffff8111156142b7576142b66138ea565b5b6142c18254613d22565b6142cc8282856141fa565b6000601f8311600181146142fb57600084156142e9578287015490505b6142f3858261426b565b865550614366565b601f19841661430987613ea2565b965061431486613ea2565b60005b8281101561433c57848901548255600182019150600185019450602081019050614317565b868310156143595784890154614355601f89168261424d565b8355505b6001600288020188555050505b5050505050505b565b60006040820190506143846000830185613626565b6143916020830184613626565b9392505050565b60006060820190506143ad6000830186613617565b6143ba6020830185613626565b6143c76040830184613617565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000614409826132ee565b6144138185613e97565b935061442381856020860161330a565b80840191505092915050565b600061443b82846143fe565b915081905092915050565b600061445282856143fe565b915061445e82846143fe565b91508190509392505050565b60006144758261337e565b91506144808361337e565b925082820190508082111561449857614497613f51565b5b92915050565b6144a7826132ee565b67ffffffffffffffff8111156144c0576144bf6138ea565b5b6144ca8254613d22565b6144d58282856141fa565b600060209050601f83116001811461450857600084156144f6578287015190505b614500858261426b565b865550614568565b601f19841661451686613ea2565b60005b8281101561453e57848901518255600182019150602085019450602081019050614519565b8683101561455b5784890151614557601f89168261424d565b8355505b6001600288020188555050505b505050505050565b600069ffffffffffffffffffff82169050919050565b61458f81614570565b811461459a57600080fd5b50565b6000815190506145ac81614586565b92915050565b6000819050919050565b6145c5816145b2565b81146145d057600080fd5b50565b6000815190506145e2816145bc565b92915050565b6000815190506145f7816135ab565b92915050565b600080600080600060a0868803121561461957614618613163565b5b60006146278882890161459d565b9550506020614638888289016145d3565b9450506040614649888289016145e8565b935050606061465a888289016145e8565b925050608061466b8882890161459d565b9150509295509295909350565b6000614683826145b2565b915061468e836145b2565b925082820261469c816145b2565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156146d4576146d3613f51565b5b82820584148315176146e9576146e8613f51565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b6000614717826146f0565b61472181856146fb565b935061473181856020860161330a565b61473a81613334565b840191505092915050565b600060808201905061475a6000830187613617565b6147676020830186613617565b6147746040830185613626565b8181036060830152614786818461470c565b905095945050505050565b6000815190506147a081613199565b92915050565b6000602082840312156147bc576147bb613163565b5b60006147ca84828501614791565b91505092915050565b60006040820190506147e86000830185613617565b6147f56020830184613626565b939250505056fea2646970667358221220482cd069bbe59cf16dc7bea3b950698eb0e308a0e9e885330d8391cec9ddb28364736f6c63430008140033",
    "deployedBytecode": "",
    "devdoc": {
      "author": "Abdulazeez Salihu",
      "details": "The contract implements the Chainlink PriceFeed AggregatorV3Interface ",
      "errors": {
        "ERC721IncorrectOwner(address,uint256,address)": [
          {
            "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
            "params": {
              "owner": "Address of the current owner of a token.",
              "sender": "Address whose tokens are being transferred.",
              "tokenId": "Identifier number of a token."
            }
          }
        ],
        "ERC721InsufficientApproval(address,uint256)": [
          {
            "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
            "params": {
              "operator": "Address that may be allowed to operate on tokens without being their owner.",
              "tokenId": "Identifier number of a token."
            }
          }
        ],
        "ERC721InvalidApprover(address)": [
          {
            "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
            "params": {
              "approver": "Address initiating an approval operation."
            }
          }
        ],
        "ERC721InvalidOperator(address)": [
          {
            "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
            "params": {
              "operator": "Address that may be allowed to operate on tokens without being their owner."
            }
          }
        ],
        "ERC721InvalidOwner(address)": [
          {
            "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
            "params": {
              "owner": "Address of the current owner of a token."
            }
          }
        ],
        "ERC721InvalidReceiver(address)": [
          {
            "details": "Indicates a failure with the token `receiver`. Used in transfers.",
            "params": {
              "receiver": "Address to which tokens are being transferred."
            }
          }
        ],
        "ERC721InvalidSender(address)": [
          {
            "details": "Indicates a failure with the token `sender`. Used in transfers.",
            "params": {
              "sender": "Address whose tokens are being transferred."
            }
          }
        ],
        "ERC721NonexistentToken(uint256)": [
          {
            "details": "Indicates a `tokenId` whose `owner` is the zero address.",
            "params": {
              "tokenId": "Identifier number of a token."
            }
          }
        ]
      },
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
        },
        "ApprovalForAll(address,address,bool)": {
          "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
        },
        "BatchMetadataUpdate(uint256,uint256)": {
          "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
        },
        "MetadataUpdate(uint256)": {
          "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
        }
      },
      "kind": "dev",
      "methods": {
        "allBlockPassList()": {
          "details": "Retrieves an array of all blockpasses in the contract.",
          "returns": {
            "_0": "An array of block passes."
          }
        },
        "approve(address,uint256)": {
          "details": "See {IERC721-approve}."
        },
        "balanceOf(address)": {
          "details": "See {IERC721-balanceOf}."
        },
        "blockPassesBookedByUser(address)": {
          "details": "Retrieves the block passes booked by a specific user.",
          "params": {
            "_user": "The address of the user."
          },
          "returns": {
            "_0": "An array of block passes booked by the user."
          }
        },
        "createNewPass(uint256,uint256,uint256,uint256,string,string)": {
          "details": "Allows an organizer to create a new blockpass.",
          "params": {
            "_category": "The category of the blockpass.",
            "_initialPassPrice": "The first price for each block pass.",
            "_max_pass_count": "The maximum number of passes available for the new blockpass ticket.",
            "_metadata": "Additional metadata for the blockpass.",
            "_salesEndTime": "The end time of sales for the blockpass.",
            "_startTime": "The start time of the blockpass."
          }
        },
        "getApproved(uint256)": {
          "details": "See {IERC721-getApproved}."
        },
        "getByCategory(string)": {
          "details": "Retrieves an array of block passes belonging to a specific category.",
          "params": {
            "_category": "The category of block passes to retrieve."
          },
          "returns": {
            "_0": "An array of block passes in the specified category."
          }
        },
        "getUserTokens(address)": {
          "details": "Retrieves the NFT tokens owned by a specific user.",
          "params": {
            "_user": "The address of the user."
          },
          "returns": {
            "_0": "An array of NFT token IDs owned by the user."
          }
        },
        "isApprovedForAll(address,address)": {
          "details": "See {IERC721-isApprovedForAll}."
        },
        "name()": {
          "details": "See {IERC721Metadata-name}."
        },
        "ownerOf(uint256)": {
          "details": "See {IERC721-ownerOf}."
        },
        "purchasePass(uint256)": {
          "details": "Allows a user to purchase a block pass.",
          "params": {
            "_blockPassId": "The ID of the block pass to be purchased."
          }
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "See {IERC721-safeTransferFrom}."
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "See {IERC721-safeTransferFrom}."
        },
        "setApprovalForAll(address,bool)": {
          "details": "See {IERC721-setApprovalForAll}."
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}"
        },
        "symbol()": {
          "details": "See {IERC721Metadata-symbol}."
        },
        "tokenURI(uint256)": {
          "details": "See {IERC721Metadata-tokenURI}."
        },
        "transferFrom(address,address,uint256)": {
          "details": "See {IERC721-transferFrom}."
        }
      },
      "title": "BlockPass",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {},
      "notice": "This contract is for creating and managing block passes.",
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 1871,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_name",
          "offset": 0,
          "slot": "0",
          "type": "t_string_storage"
        },
        {
          "astId": 1873,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_symbol",
          "offset": 0,
          "slot": "1",
          "type": "t_string_storage"
        },
        {
          "astId": 1877,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_owners",
          "offset": 0,
          "slot": "2",
          "type": "t_mapping(t_uint256,t_address)"
        },
        {
          "astId": 1881,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_balances",
          "offset": 0,
          "slot": "3",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 1885,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_tokenApprovals",
          "offset": 0,
          "slot": "4",
          "type": "t_mapping(t_uint256,t_address)"
        },
        {
          "astId": 1891,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_operatorApprovals",
          "offset": 0,
          "slot": "5",
          "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
        },
        {
          "astId": 2866,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "_tokenURIs",
          "offset": 0,
          "slot": "6",
          "type": "t_mapping(t_uint256,t_string_storage)"
        },
        {
          "astId": 3021,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "tokenId",
          "offset": 0,
          "slot": "7",
          "type": "t_struct(Counter)5_storage"
        },
        {
          "astId": 3045,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "blockPass_count",
          "offset": 0,
          "slot": "8",
          "type": "t_uint256"
        },
        {
          "astId": 3048,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "s_priceFeed",
          "offset": 0,
          "slot": "9",
          "type": "t_contract(AggregatorV3Interface)3009"
        },
        {
          "astId": 3052,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "blockPassList",
          "offset": 0,
          "slot": "10",
          "type": "t_array(t_struct(BlockPassDetails)3042_storage)dyn_storage"
        },
        {
          "astId": 3057,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "getPassById",
          "offset": 0,
          "slot": "11",
          "type": "t_mapping(t_uint256,t_struct(BlockPassDetails)3042_storage)"
        },
        {
          "astId": 3063,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "bookedPassByUser",
          "offset": 0,
          "slot": "12",
          "type": "t_mapping(t_address,t_array(t_struct(BlockPassDetails)3042_storage)dyn_storage)"
        },
        {
          "astId": 3068,
          "contract": "contracts/BlockPass.sol:BlockPass",
          "label": "tokenOfOwnerByIndex",
          "offset": 0,
          "slot": "13",
          "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_struct(BlockPassDetails)3042_storage)dyn_storage": {
          "base": "t_struct(BlockPassDetails)3042_storage",
          "encoding": "dynamic_array",
          "label": "struct BlockPass.BlockPassDetails[]",
          "numberOfBytes": "32"
        },
        "t_array(t_uint256)dyn_storage": {
          "base": "t_uint256",
          "encoding": "dynamic_array",
          "label": "uint256[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_contract(AggregatorV3Interface)3009": {
          "encoding": "inplace",
          "label": "contract AggregatorV3Interface",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_array(t_struct(BlockPassDetails)3042_storage)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => struct BlockPass.BlockPassDetails[])",
          "numberOfBytes": "32",
          "value": "t_array(t_struct(BlockPassDetails)3042_storage)dyn_storage"
        },
        "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256[])",
          "numberOfBytes": "32",
          "value": "t_array(t_uint256)dyn_storage"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_mapping(t_address,t_bool))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => bool))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_bool)"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_uint256,t_address)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => address)",
          "numberOfBytes": "32",
          "value": "t_address"
        },
        "t_mapping(t_uint256,t_string_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => string)",
          "numberOfBytes": "32",
          "value": "t_string_storage"
        },
        "t_mapping(t_uint256,t_struct(BlockPassDetails)3042_storage)": {
          "encoding": "mapping",
          "key": "t_uint256",
          "label": "mapping(uint256 => struct BlockPass.BlockPassDetails)",
          "numberOfBytes": "32",
          "value": "t_struct(BlockPassDetails)3042_storage"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(BlockPassDetails)3042_storage": {
          "encoding": "inplace",
          "label": "struct BlockPass.BlockPassDetails",
          "members": [
            {
              "astId": 3023,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "organizer",
              "offset": 0,
              "slot": "0",
              "type": "t_address"
            },
            {
              "astId": 3025,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "metadata",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage"
            },
            {
              "astId": 3027,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "category",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage"
            },
            {
              "astId": 3029,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "blockPassId",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            },
            {
              "astId": 3031,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "passesSold",
              "offset": 0,
              "slot": "4",
              "type": "t_uint256"
            },
            {
              "astId": 3033,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "max_passes",
              "offset": 0,
              "slot": "5",
              "type": "t_uint256"
            },
            {
              "astId": 3035,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "passPrice",
              "offset": 0,
              "slot": "6",
              "type": "t_uint256"
            },
            {
              "astId": 3037,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "startTime",
              "offset": 0,
              "slot": "7",
              "type": "t_uint256"
            },
            {
              "astId": 3039,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "salesEndTime",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256"
            },
            {
              "astId": 3041,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "bpEnded",
              "offset": 0,
              "slot": "9",
              "type": "t_bool"
            }
          ],
          "numberOfBytes": "320"
        },
        "t_struct(Counter)5_storage": {
          "encoding": "inplace",
          "label": "struct Counters.Counter",
          "members": [
            {
              "astId": 4,
              "contract": "contracts/BlockPass.sol:BlockPass",
              "label": "_value",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "32"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        }
      }
    }
  }